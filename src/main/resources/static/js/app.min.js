var APP;
var theme;
var stompClient = null;
var socket = null

function connectWebsocket(){
    socket = new SockJS('/ws');
    stompClient = Stomp.over(socket);
    stompClient.connect({}, function(frame) {
        //console.log(frame);
        stompClient.subscribe('/app/users.online', onMessageReceived);
        stompClient.subscribe('/all', onMessageReceived);
        stompClient.subscribe('/users/admin/specific', onMessageReceived);
    });

    stompClient.debug = null;

    socket.onclose = function(e) {
        console.log('Socket is closed. Reconnect will be attempted in second.', e.reason);
        setTimeout(function() {
            connectWebsocket();
        }, 500);
        };
    
    socket.onerror = function(err) {
        console.error('Socket encountered error: ', err.message, 'Closing socket');
        ws.close();
    };
}

function sendMessage() {
    if(stompClient){
        var message = {
            sender: user.username,
            type: "NOTIFICATION",
            message: "New notification"
        }
        stompClient.send("/app/public", {}, JSON.stringify(message));
    }
}

function sendMessage2(message) {
    if(stompClient){
        var message = {
            sender: user.username,
            type: "RELOAD",
            message: message
        }
        stompClient.send("/app/public", {}, JSON.stringify(message));
    }
}

function sendMessage3(message) {
    if(stompClient){
        var message = {
            sender: user.username,
            type: "LOADITEMDATA",
            message: message
        }
        stompClient.send("/app/public", {}, JSON.stringify(message));
    }
}
connectWebsocket();
loadNotification();

// window.onbeforeunload = function() {
//     socket.onclose = function () {}; // disable onclose handler first
//     socket.close();
// };

function onMessageReceived(payload) {
    var message = JSON.parse(payload.body);
    if(message.type == "ONLINE" || message.type == "CONNECT" || message.type == "DISCONNECT"){
        $("#ou-list").empty();
        $("#num-online").text(message.data.length);
        let elm = "";
        message.data.forEach(d =>{
            elm += `<div class="online-user">
                        <span class="mx-2 p-2" style="width: 50px; height: 50px;"><img src="/img/user-avatar.png" /></span>
                        <span class="online-notify"></span>
                        <span>${d}</span>
                    </div>`
        })
        $("#ou-list").append(elm);
    }
    if(message.type == "NOTIFICATION"){
        loadNotification();
    }
    if(message.type == "RELOAD"){
        if(window.location.href == message.message){
            table.ajax.reload(null, false); 
        }
    }
    if(message.type == "LOADITEMDATA"){
        if(window.location.href == message.message){
            loadItemData();
        }
    }
}

function loadNotification(){
    //event.preventDefault();
    fetch("/api/notification", {
        method: "GET", 
        headers: {
        "Content-Type": "application/json",
        }
    }).then(response =>{
        if(!response.ok) throw Error(response.statusText);
        return response.json();
    }).then(data=>{
        var elm = "";
        $("#noti-list").empty();
        if(data.data.length>0){
            $("#num-noti").text(data.data.length);
        }
        data.data.forEach(dt =>{
            var name = dt.sender.username;
            if(dt.sender.fullname !="" && dt.sender.fullname != null){
                name = dt.sender.fullname;
            }
            elm += 
            `<div><a href="${dt.url}">
                <div class="noti-item" onclick="setReadNoti(${dt.id})">
                    <div class="mx-3" style="display: inline-block;">
                        <img src="/img/user-avatar.png" />
                    </div>
                    <div class="" style="display: inline-block;">
                        <div class="font-strong">${name}</div>
                        <small class="text-muted float-right">${moment(dt.createdAt).locale('vi').format('HH:mm DD/MM/YY')}</small>
                        <div class="font-13">${dt.message}</div>
                    </div>
                </div>
            </a></div>`

        });
        $("#noti-list").append(elm);
    }).catch (error => console.error("Error:", error))
}

function setReadNoti(id){
    fetch("/api/notification?id="+id, {
        method: "POST", 
        headers: {
        "Content-Type": "application/json",
        }
    }).then(response =>{
        if(!response.ok) throw Error(response.statusText);
        return response.json();
    }).then(data =>{
        if(data.status=="ok"){
            //loadNotification();
        }
    }).catch(error => console.error(error));
}

(APP = new(APP = function() {
    this.ASSETS_PATH = "./assets/", this.SERVER_PATH = this.ASSETS_PATH + "demo/server/", this.is_touch_device = function() {
        return !!("ontouchstart" in window) || !!("onmsgesturechange" in window)
    }
})).UI = {
    scrollTop: 0
}, 
$(window).on("load", function() {
    theme = JSON.parse(localStorage.getItem("theme")) || null;
    if(theme == null){
        theme = { sidebar : "full", layout: "fluid", color:"default"}
        localStorage.setItem("theme", JSON.stringify(theme));
    }

    if(theme.sidebar=="collapse") {
        $("body").toggleClass("sidebar-mini");
        $(".js-sidebar-toggler").prop('checked', true);
    }
    if(theme.layout=="boxed") {
        $("body").toggleClass("boxed-layout");
        $("input[value='1']").prop('checked', true);
    }else{
        $("input[value='0']").prop('checked', true);
    }
    "default" != theme.color ? $("#theme-style").length ? $("#theme-style").attr("href", "/css/themes/" + theme.color + ".css") : $("head").append("<link href='/css/themes/" + theme.color + ".css' rel='stylesheet' id='theme-style' >") : $("#theme-style").remove()

    setTimeout(function() {
        $(".preloader-backdrop").fadeOut(200), $("body").addClass("has-animation")
    }, 0)
}), $(window).on("load resize scroll", function() {
    $(this).width() < 992 && $("body").addClass("sidebar-mini")
}), $(function() {
    function e(o) {
        27 == o.which && ($("body").removeClass("fullscreen-mode"), $(".ibox-fullscreen").removeClass("ibox-fullscreen"), $(window).off("keydown", e))
    }

    $(".metismenu").metisMenu(), $('[data-toggle="tooltip"]').tooltip(), $('[data-toggle="popover"]').popover(), $(".scroller").each(function() {
        $(this).slimScroll({
            height: $(this).attr("data-height"),
            color: $(this).attr("data-color"),
            railOpacity: "0.9"
        })
    }), $(".theme-config-toggle").on("click", function() {
        $(this).parents(".theme-config").toggleClass("opened")
    }), $(".js-sidebar-toggler").click(function() {
        $("body").toggleClass("sidebar-mini");
        if($("body").hasClass("sidebar-mini")){
            theme.sidebar = "collapse";
        }else{
            theme.sidebar = "full";
        }
        localStorage.setItem("theme", JSON.stringify(theme));
    // }), $("#_fixedlayout").change(function() {
    //     $(this).is(":checked") ? ($("body").addClass("fixed-layout"), $("#sidebar-collapse").slimScroll({
    //         height: "100%",
    //         railOpacity: "0.9"
    //     })) : ($("#sidebar-collapse").slimScroll({
    //         destroy: !0
    //     }).css({
    //         overflow: "visible",
    //         height: "auto"
    //     }), $("body").removeClass("fixed-layout"))
    // }), $("#_fixedNavbar").change(function() {
    //     $(this).is(":checked") ? $("body").addClass("fixed-navbar") : $("body").removeClass("fixed-navbar")
    }), $("[name='layout-style']").change(function() {
        if($(this).val()==1){
            $("body").addClass("boxed-layout");
            theme.layout="boxed";
        }else{
            $("body").removeClass("boxed-layout"); 
            theme.layout="fluid";
        }
        localStorage.setItem("theme", JSON.stringify(theme));
        //+$(this).val() ? $("body").addClass("boxed-layout") : $("body").removeClass("boxed-layout");
    }), $(".color-skin-box input:radio").change(function() {
        var e = $(this).val();
        theme.color = e;
        localStorage.setItem("theme", JSON.stringify(theme));
        "default" != e ? $("#theme-style").length ? $("#theme-style").attr("href", "/css/themes/" + e + ".css") : $("head").append("<link href='/css/themes/" + e + ".css' rel='stylesheet' id='theme-style' >") : $("#theme-style").remove()
    }), $(window).scroll(function() {
        $(this).scrollTop() > APP.UI.scrollTop ? $(".to-top").fadeIn() : $(".to-top").fadeOut()
    }), $(".to-top").click(function(e) {
        $("html, body").animate({
            scrollTop: 0
        }, 500)
    }), $(".ibox-collapse").click(function() {
        $(this).closest("div.ibox").toggleClass("collapsed-mode").children(".ibox-body").slideToggle(200)
    }), $(".ibox-remove").click(function() {
        $(this).closest("div.ibox").remove()
    }), $(".fullscreen-link").click(function() {
        $("body").hasClass("fullscreen-mode") ? ($("body").removeClass("fullscreen-mode"), $(this).closest("div.ibox").removeClass("ibox-fullscreen"), $(window).off("keydown", e)) : ($("body").addClass("fullscreen-mode"), $(this).closest("div.ibox").addClass("ibox-fullscreen"), $(window).on("keydown", e))
    }), $.fn.backdrop = function() {
        return $(this).toggleClass("shined"), $("body").toggleClass("has-backdrop"), $(this)
    }, $(".backdrop").click(function() {
        $("body").removeClass("has-backdrop"), $(".shined").removeClass("shined")
    }),$(".btn-setting").click(function(){
        var href = jQuery(this).attr('href');
        jQuery(href).modal('toggle');
    })
}), $(function() {
    $.fn.timepicker && ($.fn.timepicker.defaults = $.extend(!0, {}, $.fn.timepicker.defaults, {
        icons: {
            up: "fa fa-angle-up",
            down: "fa fa-angle-down"
        }
    }))
});